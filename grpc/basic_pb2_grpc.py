# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc import basic_pb2 as grpc_dot_basic__pb2


class TaskStub(object):
    """TaskController
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createTrain = channel.stream_unary(
                '/Task/createTrain',
                request_serializer=grpc_dot_basic__pb2.FileBody.SerializeToString,
                response_deserializer=grpc_dot_basic__pb2.Response.FromString,
                )
        self.getModel = channel.unary_unary(
                '/Task/getModel',
                request_serializer=grpc_dot_basic__pb2.GetInfo.SerializeToString,
                response_deserializer=grpc_dot_basic__pb2.Response.FromString,
                )
        self.createPredict = channel.stream_unary(
                '/Task/createPredict',
                request_serializer=grpc_dot_basic__pb2.FileBody.SerializeToString,
                response_deserializer=grpc_dot_basic__pb2.Response.FromString,
                )


class TaskServicer(object):
    """TaskController
    """

    def createTrain(self, request_iterator, context):
        """
        创建一个训练任务
        return {guid}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getModel(self, request, context):
        """
        创建一个训练任务
        return {
        bert_config_file
        vocab_file
        tags_file
        bert_model
        lstm_crf_model
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createPredict(self, request_iterator, context):
        """
        创建一个预测任务
        return {guid}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createTrain': grpc.stream_unary_rpc_method_handler(
                    servicer.createTrain,
                    request_deserializer=grpc_dot_basic__pb2.FileBody.FromString,
                    response_serializer=grpc_dot_basic__pb2.Response.SerializeToString,
            ),
            'getModel': grpc.unary_unary_rpc_method_handler(
                    servicer.getModel,
                    request_deserializer=grpc_dot_basic__pb2.GetInfo.FromString,
                    response_serializer=grpc_dot_basic__pb2.Response.SerializeToString,
            ),
            'createPredict': grpc.stream_unary_rpc_method_handler(
                    servicer.createPredict,
                    request_deserializer=grpc_dot_basic__pb2.FileBody.FromString,
                    response_serializer=grpc_dot_basic__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Task', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Task(object):
    """TaskController
    """

    @staticmethod
    def createTrain(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Task/createTrain',
            grpc_dot_basic__pb2.FileBody.SerializeToString,
            grpc_dot_basic__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task/getModel',
            grpc_dot_basic__pb2.GetInfo.SerializeToString,
            grpc_dot_basic__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createPredict(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Task/createPredict',
            grpc_dot_basic__pb2.FileBody.SerializeToString,
            grpc_dot_basic__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TrainStub(object):
    """PredictController
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.train = channel.unary_stream(
                '/Train/train',
                request_serializer=grpc_dot_basic__pb2.TrainInfo.SerializeToString,
                response_deserializer=grpc_dot_basic__pb2.Response.FromString,
                )


class TrainServicer(object):
    """PredictController
    """

    def train(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'train': grpc.unary_stream_rpc_method_handler(
                    servicer.train,
                    request_deserializer=grpc_dot_basic__pb2.TrainInfo.FromString,
                    response_serializer=grpc_dot_basic__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Train', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Train(object):
    """PredictController
    """

    @staticmethod
    def train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Train/train',
            grpc_dot_basic__pb2.TrainInfo.SerializeToString,
            grpc_dot_basic__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PredictStub(object):
    """PredictController
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.pred = channel.unary_unary(
                '/Predict/pred',
                request_serializer=grpc_dot_basic__pb2.PredictInfo.SerializeToString,
                response_deserializer=grpc_dot_basic__pb2.Response.FromString,
                )


class PredictServicer(object):
    """PredictController
    """

    def pred(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PredictServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'pred': grpc.unary_unary_rpc_method_handler(
                    servicer.pred,
                    request_deserializer=grpc_dot_basic__pb2.PredictInfo.FromString,
                    response_serializer=grpc_dot_basic__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Predict', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Predict(object):
    """PredictController
    """

    @staticmethod
    def pred(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Predict/pred',
            grpc_dot_basic__pb2.PredictInfo.SerializeToString,
            grpc_dot_basic__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
